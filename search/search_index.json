{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ModCS This is the official site for ModCS , a Cave Story modding utility, which's main feature is a Lua scripting API. The Lua API currently easily allows you to make custom HUD elements, easily modify and make NPCs and create custom TextScript commands. This project was started to give people a more accessible way to make advanced Cave Story mods, without having to deal with Assembly and the limitations of the original executable of the game. This was also started to give people a somewhat more legal way to make advanced modifications, you can read more on that in the License . Currently ModCS is not officially out, but you may still read the documentation for its API.","title":"ModCS"},{"location":"#modcs","text":"This is the official site for ModCS , a Cave Story modding utility, which's main feature is a Lua scripting API. The Lua API currently easily allows you to make custom HUD elements, easily modify and make NPCs and create custom TextScript commands. This project was started to give people a more accessible way to make advanced Cave Story mods, without having to deal with Assembly and the limitations of the original executable of the game. This was also started to give people a somewhat more legal way to make advanced modifications, you can read more on that in the License . Currently ModCS is not officially out, but you may still read the documentation for its API.","title":"ModCS"},{"location":"license/","text":"License and Legality ModCS is based on Cave Story Engine 2 , which is a decompilation of the original freeware release of Cave Story, which means that decompilation related code in this project is owned by Nicalis Inc., Clownacy, CuckyDev and GabrielTFS... But mostly Nicalis. Now, I know that this project is legally wrong , but I'm sincerely hoping it does not get taken down by Nicalis. The Cave Story Modding Community Discord server and the Cave Story Mod Database both allow CSE2 mods to be shared as long as any source code is not distributed . This project was, after all, started because I wanted to give people a more accessible way to do advanced Cave Story modding without having to use CSE2. All of the reasons I assume Nicalis would want to take down CSE2 don't necessarily apply to a project like this... but at the same time nobody really knows exactly why they would take it down. If this eventually gets a DMCA notice then, I dunno, I'll probably move it to Clownacy Modloader, or something. If you are not a Nicalis representative and think that this project harms Nicalis Inc.'s sales, please use one of the following hotkeys to download the Nicalis-friendly version of this project: Ctrl+W Alt+F4 The power button on your computer (I'm joking, a \"legal\" Cave Story mod doesn't exist. Nicalis can DMCA Freeware mods too, it's just a matter of \"what do they want to take down\", so screw off now.)","title":"License and Legality"},{"location":"license/#license-and-legality","text":"ModCS is based on Cave Story Engine 2 , which is a decompilation of the original freeware release of Cave Story, which means that decompilation related code in this project is owned by Nicalis Inc., Clownacy, CuckyDev and GabrielTFS... But mostly Nicalis. Now, I know that this project is legally wrong , but I'm sincerely hoping it does not get taken down by Nicalis. The Cave Story Modding Community Discord server and the Cave Story Mod Database both allow CSE2 mods to be shared as long as any source code is not distributed . This project was, after all, started because I wanted to give people a more accessible way to do advanced Cave Story modding without having to use CSE2. All of the reasons I assume Nicalis would want to take down CSE2 don't necessarily apply to a project like this... but at the same time nobody really knows exactly why they would take it down. If this eventually gets a DMCA notice then, I dunno, I'll probably move it to Clownacy Modloader, or something. If you are not a Nicalis representative and think that this project harms Nicalis Inc.'s sales, please use one of the following hotkeys to download the Nicalis-friendly version of this project: Ctrl+W Alt+F4 The power button on your computer (I'm joking, a \"legal\" Cave Story mod doesn't exist. Nicalis can DMCA Freeware mods too, it's just a matter of \"what do they want to take down\", so screw off now.)","title":"License and Legality"},{"location":"api/game/","text":"ModCS.Game Functions related to the main game loop. Stored in the ModCS.Game object. Warning The main game loop does not include: The inventory screen The stage select screen Minimap screen Credits Pause screen Functions such as ModCS.Game.Act() and ModCS.Game.Draw() will not run during these screens. ModCS.Game.GetMode() Return a number that represents the current game mode. Value Game mode 1 Opening sequence. 2 Title screen. 3 Action. ModCS.Game.Init() This function is called whenever a game mode is started. Example This example will clear a variable foo on every game mode start. 1 2 3 4 function ModCS . Game . Init () -- Clear our foo variable foo = 0 end ModCS.Game.Act() This function is called every frame before anything is drawn in the main game loop. Example This example will add 1 to a variable foo every frame. 1 2 3 4 function ModCS . Game . Act () -- Add 1 to our foo variable every frame foo = foo + 1 end ModCS.Game.Draw() This function is called every frame after everything is drawn in the main game loop. Example This example will draw the value of the variable foo using ModCS.PutNumber . 1 2 3 4 function ModCS . Game . Draw () -- Draw the value of our variable ModCS . PutNumber ( foo , 0 , 0 ) end Note ModCS.Game.Draw() will draw over everything . If you're planning on using it for custom HUD it's recommended to draw to the custom HUD Surface instead.","title":"ModCS.Game"},{"location":"api/game/#modcsgame","text":"Functions related to the main game loop. Stored in the ModCS.Game object. Warning The main game loop does not include: The inventory screen The stage select screen Minimap screen Credits Pause screen Functions such as ModCS.Game.Act() and ModCS.Game.Draw() will not run during these screens.","title":"ModCS.Game"},{"location":"api/game/#modcsgamegetmode","text":"Return a number that represents the current game mode. Value Game mode 1 Opening sequence. 2 Title screen. 3 Action.","title":"ModCS.Game.GetMode()"},{"location":"api/game/#modcsgameinit","text":"This function is called whenever a game mode is started. Example This example will clear a variable foo on every game mode start. 1 2 3 4 function ModCS . Game . Init () -- Clear our foo variable foo = 0 end","title":"ModCS.Game.Init()"},{"location":"api/game/#modcsgameact","text":"This function is called every frame before anything is drawn in the main game loop. Example This example will add 1 to a variable foo every frame. 1 2 3 4 function ModCS . Game . Act () -- Add 1 to our foo variable every frame foo = foo + 1 end","title":"ModCS.Game.Act()"},{"location":"api/game/#modcsgamedraw","text":"This function is called every frame after everything is drawn in the main game loop. Example This example will draw the value of the variable foo using ModCS.PutNumber . 1 2 3 4 function ModCS . Game . Draw () -- Draw the value of our variable ModCS . PutNumber ( foo , 0 , 0 ) end Note ModCS.Game.Draw() will draw over everything . If you're planning on using it for custom HUD it's recommended to draw to the custom HUD Surface instead.","title":"ModCS.Game.Draw()"},{"location":"api/key/","text":"ModCS.Key The ModCS.Key namespace contains functions for checking key presses. All ModCS.Key functions follow a similar format: ModCS . Key . Button ( hold ) Returns true if the button is being pressed. hold is an optional parameter and a Boolean. If set to true the function will return true if the button is being held. List of functions ModCS . Key . Jump ( hold ) -- Can be set to either Z or X in DoConfig ModCS . Key . Shoot ( hold ) -- Can be set to either X or Z in DoConfig ModCS . Key . Arms ( hold ) -- A key ModCS . Key . ArmsRev ( hold ) -- S key ModCS . Key . Item ( hold ) -- Q key ModCS . Key . Map ( hold ) -- W key ModCS . Key . Ok ( hold ) -- Can be either the Jump button or Shoot button in DoConfig ModCS . Key . Cancel ( hold ) -- Can be either the Shoot button or Jump button in DoConfig ModCS . Key . Left ( hold ) -- Can be either Left arrow key or < in DoConfig ModCS . Key . Up ( hold ) -- Can be either Up arrow key or L in DoConfig ModCS . Key . Right ( hold ) -- Can be either Right arrow key or ? in DoConfig ModCS . Key . Down ( hold ) -- Can be either Down arrow key or > in DoConfig","title":"ModCS.Key"},{"location":"api/key/#modcskey","text":"The ModCS.Key namespace contains functions for checking key presses. All ModCS.Key functions follow a similar format: ModCS . Key . Button ( hold ) Returns true if the button is being pressed. hold is an optional parameter and a Boolean. If set to true the function will return true if the button is being held.","title":"ModCS.Key"},{"location":"api/key/#list-of-functions","text":"ModCS . Key . Jump ( hold ) -- Can be set to either Z or X in DoConfig ModCS . Key . Shoot ( hold ) -- Can be set to either X or Z in DoConfig ModCS . Key . Arms ( hold ) -- A key ModCS . Key . ArmsRev ( hold ) -- S key ModCS . Key . Item ( hold ) -- Q key ModCS . Key . Map ( hold ) -- W key ModCS . Key . Ok ( hold ) -- Can be either the Jump button or Shoot button in DoConfig ModCS . Key . Cancel ( hold ) -- Can be either the Shoot button or Jump button in DoConfig ModCS . Key . Left ( hold ) -- Can be either Left arrow key or < in DoConfig ModCS . Key . Up ( hold ) -- Can be either Up arrow key or L in DoConfig ModCS . Key . Right ( hold ) -- Can be either Right arrow key or ? in DoConfig ModCS . Key . Down ( hold ) -- Can be either Down arrow key or > in DoConfig","title":"List of functions"},{"location":"api/map/","text":"ModCS.Map The ModCS.Map namespace contains functions related to Maps. Maps are a collection of files stored in the /data/Stage/ folder. They are only usuable in-game via a Stage . Maps are composed of 3 types of files: PXM (PixMap) files - For storing tile placement. PXE (PixEvent or PixEntity) - For storing NPC placement. TSC Files - For storing an individual map's TextScript . Tile Unit Map files (TSC included) use Tile Units for coordinates rather than Pixel Units . One Tile Unit is 16x16 Pixel Units. ModCS.Map.GetWidth() ModCS . Map . GetWidth () Returns the width in tile units of the current loaded map. ModCS.Map.GetHeight() ModCS . Map . GetHeight () Returns the height in tile units of the current loaded map. ModCS.Map.GetFilename() ModCS . Map . GetAttribute ( x , y ) Returns the attribute of the tile at tile unit coordinates x and y . ModCS.Map.ChangeTile() ModCS . Map . ChangeTile ( no , x , y , smoke ) Changes the tile at tile unit coordinates x and y of the current map to tile no . smoke is an optional parameter and a Boolean. If set to true, spawn smoke NPCs at the position of the changing tile.","title":"ModCS.Map"},{"location":"api/map/#modcsmap","text":"The ModCS.Map namespace contains functions related to Maps. Maps are a collection of files stored in the /data/Stage/ folder. They are only usuable in-game via a Stage . Maps are composed of 3 types of files: PXM (PixMap) files - For storing tile placement. PXE (PixEvent or PixEntity) - For storing NPC placement. TSC Files - For storing an individual map's TextScript .","title":"ModCS.Map"},{"location":"api/map/#tile-unit","text":"Map files (TSC included) use Tile Units for coordinates rather than Pixel Units . One Tile Unit is 16x16 Pixel Units.","title":"Tile Unit"},{"location":"api/map/#modcsmapgetwidth","text":"ModCS . Map . GetWidth () Returns the width in tile units of the current loaded map.","title":"ModCS.Map.GetWidth()"},{"location":"api/map/#modcsmapgetheight","text":"ModCS . Map . GetHeight () Returns the height in tile units of the current loaded map.","title":"ModCS.Map.GetHeight()"},{"location":"api/map/#modcsmapgetfilename","text":"ModCS . Map . GetAttribute ( x , y ) Returns the attribute of the tile at tile unit coordinates x and y .","title":"ModCS.Map.GetFilename()"},{"location":"api/map/#modcsmapchangetile","text":"ModCS . Map . ChangeTile ( no , x , y , smoke ) Changes the tile at tile unit coordinates x and y of the current map to tile no . smoke is an optional parameter and a Boolean. If set to true, spawn smoke NPCs at the position of the changing tile.","title":"ModCS.Map.ChangeTile()"},{"location":"api/mod/","text":"ModCS.Mod The ModCS.Mod namespace contains functions related to customizing releases of mods. ModCS.Mod.SetName() ModCS . Mod . SetName ( name ) Sets the window title of the game to name . This function will only work at top-level. ModCS.Mod.SetAuthor() ModCS . Mod . SetAuthor ( name ) Sets the author of game to name . The author will be displayed in the version window. ModCS.Mod.SetVersion() ModCS . Mod . SetVersion ( v1 , v2 , v3 , v4 ) Sets the version of the game to v1 . v2 . v3 . v4 . This version will be in the version window. ModCS.Mod.SetOpening() ModCS . Mod . SetOpening ( no , eve , wait ) Use Stage no for the opening sequence ( Game Mode 1). eve and wait are optional parameters. If eve is specified Event eve will run once the opening sequence starts, otherwise Event 0 will run. If wait is specified, wait wait ticks during the opening before transferring to the title screen. ModCS.Mod.SetStart() ModCS . Mod . SetStart ( no , x , y , eve ) Sets the default New Game starting point. Parameters are the same as the ModCS.Stage.Transfer() function .","title":"ModCS.Mod"},{"location":"api/mod/#modcsmod","text":"The ModCS.Mod namespace contains functions related to customizing releases of mods.","title":"ModCS.Mod"},{"location":"api/mod/#modcsmodsetname","text":"ModCS . Mod . SetName ( name ) Sets the window title of the game to name . This function will only work at top-level.","title":"ModCS.Mod.SetName()"},{"location":"api/mod/#modcsmodsetauthor","text":"ModCS . Mod . SetAuthor ( name ) Sets the author of game to name . The author will be displayed in the version window.","title":"ModCS.Mod.SetAuthor()"},{"location":"api/mod/#modcsmodsetversion","text":"ModCS . Mod . SetVersion ( v1 , v2 , v3 , v4 ) Sets the version of the game to v1 . v2 . v3 . v4 . This version will be in the version window.","title":"ModCS.Mod.SetVersion()"},{"location":"api/mod/#modcsmodsetopening","text":"ModCS . Mod . SetOpening ( no , eve , wait ) Use Stage no for the opening sequence ( Game Mode 1). eve and wait are optional parameters. If eve is specified Event eve will run once the opening sequence starts, otherwise Event 0 will run. If wait is specified, wait wait ticks during the opening before transferring to the title screen.","title":"ModCS.Mod.SetOpening()"},{"location":"api/mod/#modcsmodsetstart","text":"ModCS . Mod . SetStart ( no , x , y , eve ) Sets the default New Game starting point. Parameters are the same as the ModCS.Stage.Transfer() function .","title":"ModCS.Mod.SetStart()"},{"location":"api/modcs/","text":"ModCS Object - Basics All of ModCS's API is contained in the ModCS global namespace . ModCS.WriteLog() ModCS . WriteLog ( text , number1 , number2 , number3 ) Write given data to a debug.txt file located in the same directory as the executable. All number parameters are optional, and will be casted to integers. ModCS.PutText() ModCS . PutText ( text , x , y , color , surface ) Draw given text to screen at coordinates x and y . color and surface parameters are optional. If a color is not specified the text will have the color 255, 255, 254 ( #FFFFFE ). When a surface is specified, ModCS.PutText will draw to given surface instead. ModCS.PutNumber() ModCS . PutNumber ( number , x , y , zero , surface ) Draw given number to screen at coordinates x and y . zero and surface parameters are optional. Number parameters over 9999 will display capped. zero is a Boolean. If set to true a zero will be shown to the left of the number. This only applies to one-digit numbers. When a surface is specified, ModCS.PutNumber will draw to given surface instead. ModCS.GetFullRect() Returns a full ModCS.Rect . This rect will usually equal to this: { left = 0 , top = 0 , right = 320 , bottom = 240 } ModCS.GetGameRect() Returns the canvas ModCS.Rect of the game. This rect will usually equal to this: { left = 0 , top = 0 , right = 320 , bottom = 240 } During the credits sequence the rect's left value will equal to 160. Note The main difference between ModCS.GetGameRect() and ModCS.GetFullRect() is how both values are used in the original game itself. The full Rect is often the default view limitng value for drawing a bitmap, while the game Rect is the view limiting value for game related objects (NPCs, player, map tiles, etc.). You can use these Rects with ModCS.Rect.PutEx()","title":"ModCS Object - Basics"},{"location":"api/modcs/#modcs-object-basics","text":"All of ModCS's API is contained in the ModCS global namespace .","title":"ModCS Object - Basics"},{"location":"api/modcs/#modcswritelog","text":"ModCS . WriteLog ( text , number1 , number2 , number3 ) Write given data to a debug.txt file located in the same directory as the executable. All number parameters are optional, and will be casted to integers.","title":"ModCS.WriteLog()"},{"location":"api/modcs/#modcsputtext","text":"ModCS . PutText ( text , x , y , color , surface ) Draw given text to screen at coordinates x and y . color and surface parameters are optional. If a color is not specified the text will have the color 255, 255, 254 ( #FFFFFE ). When a surface is specified, ModCS.PutText will draw to given surface instead.","title":"ModCS.PutText()"},{"location":"api/modcs/#modcsputnumber","text":"ModCS . PutNumber ( number , x , y , zero , surface ) Draw given number to screen at coordinates x and y . zero and surface parameters are optional. Number parameters over 9999 will display capped. zero is a Boolean. If set to true a zero will be shown to the left of the number. This only applies to one-digit numbers. When a surface is specified, ModCS.PutNumber will draw to given surface instead.","title":"ModCS.PutNumber()"},{"location":"api/modcs/#modcsgetfullrect","text":"Returns a full ModCS.Rect . This rect will usually equal to this: { left = 0 , top = 0 , right = 320 , bottom = 240 }","title":"ModCS.GetFullRect()"},{"location":"api/modcs/#modcsgetgamerect","text":"Returns the canvas ModCS.Rect of the game. This rect will usually equal to this: { left = 0 , top = 0 , right = 320 , bottom = 240 } During the credits sequence the rect's left value will equal to 160. Note The main difference between ModCS.GetGameRect() and ModCS.GetFullRect() is how both values are used in the original game itself. The full Rect is often the default view limitng value for drawing a bitmap, while the game Rect is the view limiting value for game related objects (NPCs, player, map tiles, etc.). You can use these Rects with ModCS.Rect.PutEx()","title":"ModCS.GetGameRect()"},{"location":"api/options/","text":"Extra Options Vanilla Cave Story has some extra functionality if certain empty files without file extension are present in the same directory as the EXE. Vanilla Options s_reverse - Swaps the weapon switch keys. mute - Unhides a context menu which opens a window for muting different Organya channels. fps - Enables a Framerate counter. ModCS Options These options are not present in vanilla, but were added in ModCS. debug - Enables the Debug Console and unhides the \"Debug Save\" option. ntsc - Makes the limit of the game's framerate 60 FPS.","title":"Extra Options"},{"location":"api/options/#extra-options","text":"Vanilla Cave Story has some extra functionality if certain empty files without file extension are present in the same directory as the EXE.","title":"Extra Options"},{"location":"api/options/#vanilla-options","text":"s_reverse - Swaps the weapon switch keys. mute - Unhides a context menu which opens a window for muting different Organya channels. fps - Enables a Framerate counter.","title":"Vanilla Options"},{"location":"api/options/#modcs-options","text":"These options are not present in vanilla, but were added in ModCS. debug - Enables the Debug Console and unhides the \"Debug Save\" option. ntsc - Makes the limit of the game's framerate 60 FPS.","title":"ModCS Options"},{"location":"api/stage/","text":"ModCS.Stage The ModCS.Stage namespace contains functions related to Stages. Stage Table The stage table is where all of the game's stages are defined. A stage table entry has the following values: Value Usage Map Filename The filename used for loading map and TSC files. Stage Name The name of the stage that will be shown in the minimap and in <MNA . Tileset The filename used for loading the tileset bitmap and PXA file. NPC Sheet 1 Filename The filename used for loading a bitmap to the NPC Spritesheet 1 surface . NPC Sheet 2 Filename The filename used for loading a bitmap to the NPC Spritesheet 2 surface . Background Filename The filename used for loading a bitmap to the Background surface . Background Scroll Type A number which represents how the background will act. Boss Number i am being forced to write these docs please send help The Stage Table is stored in a stage.tbl file that can be found in the data folder. Usually Cave Story map editors heavily depend on the Stage Table to load the correct tilesets, backgrounds and NPC Sheets when the user wants to edit a map. Most editors also do not allow you to edit maps which do not have a defined stage. Note In the original game the Stage Table is not stored in a seperate file but hardcoded into the game executable instead. ModCS.Stage.Transfer() ModCS . Stage . Transfer ( no , x , y , eve ) Transfer to stage no . If x and y are specified, change the player's tile coordinates to x and y . If eve is specified, run TSC Event eve after transferring to the stage. Run Event 0 otherwise. ModCS.Stage.GetCurrentNo() ModCS . Stage . GetCurrentNo () Returns the current stage's number. ModCS.Stage.GetFilename() ModCS . Stage . GetFilename ( no ) no is an optional parameter. Returns the filename value of stage table entry no . If no is not specified, return the filename value of the current stage. ModCS.Stage.GetName() ModCS . Stage . GetName ( no ) no is an optional parameter. Returns the stage name value of stage table entry no . If no is not specified, return the stage name value of the current stage.","title":"ModCS.Stage"},{"location":"api/stage/#modcsstage","text":"The ModCS.Stage namespace contains functions related to Stages.","title":"ModCS.Stage"},{"location":"api/stage/#stage-table","text":"The stage table is where all of the game's stages are defined. A stage table entry has the following values: Value Usage Map Filename The filename used for loading map and TSC files. Stage Name The name of the stage that will be shown in the minimap and in <MNA . Tileset The filename used for loading the tileset bitmap and PXA file. NPC Sheet 1 Filename The filename used for loading a bitmap to the NPC Spritesheet 1 surface . NPC Sheet 2 Filename The filename used for loading a bitmap to the NPC Spritesheet 2 surface . Background Filename The filename used for loading a bitmap to the Background surface . Background Scroll Type A number which represents how the background will act. Boss Number i am being forced to write these docs please send help The Stage Table is stored in a stage.tbl file that can be found in the data folder. Usually Cave Story map editors heavily depend on the Stage Table to load the correct tilesets, backgrounds and NPC Sheets when the user wants to edit a map. Most editors also do not allow you to edit maps which do not have a defined stage. Note In the original game the Stage Table is not stored in a seperate file but hardcoded into the game executable instead.","title":"Stage Table"},{"location":"api/stage/#modcsstagetransfer","text":"ModCS . Stage . Transfer ( no , x , y , eve ) Transfer to stage no . If x and y are specified, change the player's tile coordinates to x and y . If eve is specified, run TSC Event eve after transferring to the stage. Run Event 0 otherwise.","title":"ModCS.Stage.Transfer()"},{"location":"api/stage/#modcsstagegetcurrentno","text":"ModCS . Stage . GetCurrentNo () Returns the current stage's number.","title":"ModCS.Stage.GetCurrentNo()"},{"location":"api/stage/#modcsstagegetfilename","text":"ModCS . Stage . GetFilename ( no ) no is an optional parameter. Returns the filename value of stage table entry no . If no is not specified, return the filename value of the current stage.","title":"ModCS.Stage.GetFilename()"},{"location":"api/stage/#modcsstagegetname","text":"ModCS . Stage . GetName ( no ) no is an optional parameter. Returns the stage name value of stage table entry no . If no is not specified, return the stage name value of the current stage.","title":"ModCS.Stage.GetName()"},{"location":"api/tsc/","text":"ModCS.Tsc The ModCS.Tsc namespace contains functions related to TextScript (Also known as T-Script). TextScript is vanilla Cave Story's scripting language. Combined with Flags it's used for textboxes, animations, cutscenes, etc. Commands TextScript's syntax is composed of commands (or \"codes\") that do certain actions. When the TSC parser reaches a < symbol it checks the next 3 symbols and compares them to its list of commands. If no command is found an error will occur. ... Here I would put my own TSC command list but I'm currently too lazy. Please refer to your map editor's TSC list or this TXT list instead. Events TextScript scripts are seperated into Events , which are runnable sets of actions and text. Events are a defined with a # and 4 following digits, which together represent the Event number. Events are usually ended with <END . Example This is a basic TSC example event which opens a textbox. #0100 <KEY<MSGHello World<NOD<CLO<END ModCS.Tsc.Run() ModCS . Tsc . Run ( event ) Run TextScript Event event . Warning It's recommended to only use ModCS.Tsc.Run() when a TextScript event isn't running. If you want to run a different Event during another Event please use ModCS.Tsc.Jump() instead. ModCS.Tsc.Jump() ModCS . Tsc . Jump ( event ) Jump to TextScript Event event while another Event is running. ModCS.Tsc.Wait() ModCS . Tsc . Wait ( ticks ) During a TextScript event, wait ticks ticks before running the next command. ModCS.Tsc.GetArgument() ModCS . Tsc . Wait ( no ) During a custom TextScript command, get the no argument of the running command. Custom Commands ModCS allows you to have custom TextScript commands. If a function ModCS.Tsc.CommandXXX is defined (where XXX is the custom command) the function will run when the TextScript parser reaches command <XXX . Example This is an example function for a TextScript command that will print its first argument to the debug console. 1 2 3 4 function ModCS . Tsc . CommandFOO no = ModCS . Tsc . GetArgument ( 1 ) -- Get the first argument of the running command print ( no ) end #0100 <FOO0002<END Console output: 2","title":"ModCS.Tsc"},{"location":"api/tsc/#modcstsc","text":"The ModCS.Tsc namespace contains functions related to TextScript (Also known as T-Script). TextScript is vanilla Cave Story's scripting language. Combined with Flags it's used for textboxes, animations, cutscenes, etc.","title":"ModCS.Tsc"},{"location":"api/tsc/#commands","text":"TextScript's syntax is composed of commands (or \"codes\") that do certain actions. When the TSC parser reaches a < symbol it checks the next 3 symbols and compares them to its list of commands. If no command is found an error will occur. ... Here I would put my own TSC command list but I'm currently too lazy. Please refer to your map editor's TSC list or this TXT list instead.","title":"Commands"},{"location":"api/tsc/#events","text":"TextScript scripts are seperated into Events , which are runnable sets of actions and text. Events are a defined with a # and 4 following digits, which together represent the Event number. Events are usually ended with <END . Example This is a basic TSC example event which opens a textbox. #0100 <KEY<MSGHello World<NOD<CLO<END","title":"Events"},{"location":"api/tsc/#modcstscrun","text":"ModCS . Tsc . Run ( event ) Run TextScript Event event . Warning It's recommended to only use ModCS.Tsc.Run() when a TextScript event isn't running. If you want to run a different Event during another Event please use ModCS.Tsc.Jump() instead.","title":"ModCS.Tsc.Run()"},{"location":"api/tsc/#modcstscjump","text":"ModCS . Tsc . Jump ( event ) Jump to TextScript Event event while another Event is running.","title":"ModCS.Tsc.Jump()"},{"location":"api/tsc/#modcstscwait","text":"ModCS . Tsc . Wait ( ticks ) During a TextScript event, wait ticks ticks before running the next command.","title":"ModCS.Tsc.Wait()"},{"location":"api/tsc/#modcstscgetargument","text":"ModCS . Tsc . Wait ( no ) During a custom TextScript command, get the no argument of the running command.","title":"ModCS.Tsc.GetArgument()"},{"location":"api/tsc/#custom-commands","text":"ModCS allows you to have custom TextScript commands. If a function ModCS.Tsc.CommandXXX is defined (where XXX is the custom command) the function will run when the TextScript parser reaches command <XXX . Example This is an example function for a TextScript command that will print its first argument to the debug console. 1 2 3 4 function ModCS . Tsc . CommandFOO no = ModCS . Tsc . GetArgument ( 1 ) -- Get the first argument of the running command print ( no ) end #0100 <FOO0002<END Console output: 2","title":"Custom Commands"},{"location":"api/drawing/color/","text":"ModCS.Color The ModCS.Color class represents colors. They are stored in a RGB format. A ModCS.Color is userdata. You may access and edit the following values from it: Value Type Usage red Number (Casted to integer) Red value of an RGB color (0-255). green Number (Casted to integer) Green value of an RGB color (0-255). blue Number (Casted to integer) Blue value of an RGB color (0-255). ModCS.Color.Create() ModCS . Color . Create ( red , green , blue ) Returns a ModCS.Color. All parameters are optional. If any parameters are given, the returned ModCS.Color will use those parameters as RGB values. ModCS.Color.Set() ModCS . Color . Set ( color , red , green , blue ) Sets the ModCS.Color given in the color parameter to a ModCS.Color with the following parameters. ModCS.Color.Box() ModCS . Color . Box ( color , x , y , width , height , surface ) ModCS . Color . Box ( color , rect , surface ) Draw a colored box to the screen at coordinates x and y with width width and height height . The surface parameter is optional. If it's specified, draw a colored box to surface with ID surface instead. Note For a more traditional CortBox usage you may specify a rect instead of coordinates and size.","title":"ModCS.Color"},{"location":"api/drawing/color/#modcscolor","text":"The ModCS.Color class represents colors. They are stored in a RGB format. A ModCS.Color is userdata. You may access and edit the following values from it: Value Type Usage red Number (Casted to integer) Red value of an RGB color (0-255). green Number (Casted to integer) Green value of an RGB color (0-255). blue Number (Casted to integer) Blue value of an RGB color (0-255).","title":"ModCS.Color"},{"location":"api/drawing/color/#modcscolorcreate","text":"ModCS . Color . Create ( red , green , blue ) Returns a ModCS.Color. All parameters are optional. If any parameters are given, the returned ModCS.Color will use those parameters as RGB values.","title":"ModCS.Color.Create()"},{"location":"api/drawing/color/#modcscolorset","text":"ModCS . Color . Set ( color , red , green , blue ) Sets the ModCS.Color given in the color parameter to a ModCS.Color with the following parameters.","title":"ModCS.Color.Set()"},{"location":"api/drawing/color/#modcscolorbox","text":"ModCS . Color . Box ( color , x , y , width , height , surface ) ModCS . Color . Box ( color , rect , surface ) Draw a colored box to the screen at coordinates x and y with width width and height height . The surface parameter is optional. If it's specified, draw a colored box to surface with ID surface instead. Note For a more traditional CortBox usage you may specify a rect instead of coordinates and size.","title":"ModCS.Color.Box()"},{"location":"api/drawing/rect/","text":"ModCS.Rect The ModCS.Rect class represents Rects. They are a collection of pixel coordinates on a Surface which represent a part of the surface. They are mostly used for displaying different sprites from a spritesheet. A ModCS.Rect is userdata. You may access and edit the following values from it: Value Type Usage left Number (Casted to integer) X coordinate of the upper-left corner of the Rect. top Number (Casted to integer) Y coordinate of the upper-left corner of the Rect. right Number (Casted to integer) X coordinate of the down-right corner of the Rect. bottom Number (Casted to integer) Y coordinate of the down-right corner of the Rect. Rect Example This example shows you how to get the Rect of the number 4 sprite from TextBox.bmp The coordinates of the upper-left corner are 32, 56. The coordinates of the down-right corner are 40, 64. Therefore, the Rect of the number 4 sprite is: { left = 32 , top = 56 , right = 40 , bottom = 64 } ModCS.Rect.Create() ModCS . Rect . Create ( left , top , right , bottom ) Returns a ModCS.Rect. All parameters are optional. If any parameters are given, the returned ModCS.Rect will use those parameters as Rect values. ModCS.Rect.Set() ModCS . Rect . Set ( rect , left , top , right , bottom ) Sets the ModCS.Rect given in the rect parameter to a ModCS.Rect with the following parameters. ModCS.Rect.Put() ModCS . Rect . Put ( rect , x , y , surface , alpha ) Draw the given Rect from the surface with ID surface to the screen with coordinates x and y . The alpha parameter is optional and is a Boolean. If set to false the game will draw the rect without removing any fully black pixels. The default value is true. Note For a more traditional PutBitmap usage you may use ModCS.Rect.PutEx() . ModCS.Rect.Put2Surface() ModCS . Rect . Put ( rect , x , y , surfacefrom , surfaceto ) Draw the given Rect from the surface with ID surfacefrom to the surface with ID surfaceto . ModCS.Rect.PutEx() ModCS . Rect . PutEx ( rect , viewrect , x , y , surface , alpha ) The same as ModCS.Rect.Put() but with a viewrect which limits the view.","title":"ModCS.Rect"},{"location":"api/drawing/rect/#modcsrect","text":"The ModCS.Rect class represents Rects. They are a collection of pixel coordinates on a Surface which represent a part of the surface. They are mostly used for displaying different sprites from a spritesheet. A ModCS.Rect is userdata. You may access and edit the following values from it: Value Type Usage left Number (Casted to integer) X coordinate of the upper-left corner of the Rect. top Number (Casted to integer) Y coordinate of the upper-left corner of the Rect. right Number (Casted to integer) X coordinate of the down-right corner of the Rect. bottom Number (Casted to integer) Y coordinate of the down-right corner of the Rect. Rect Example This example shows you how to get the Rect of the number 4 sprite from TextBox.bmp The coordinates of the upper-left corner are 32, 56. The coordinates of the down-right corner are 40, 64. Therefore, the Rect of the number 4 sprite is: { left = 32 , top = 56 , right = 40 , bottom = 64 }","title":"ModCS.Rect"},{"location":"api/drawing/rect/#modcsrectcreate","text":"ModCS . Rect . Create ( left , top , right , bottom ) Returns a ModCS.Rect. All parameters are optional. If any parameters are given, the returned ModCS.Rect will use those parameters as Rect values.","title":"ModCS.Rect.Create()"},{"location":"api/drawing/rect/#modcsrectset","text":"ModCS . Rect . Set ( rect , left , top , right , bottom ) Sets the ModCS.Rect given in the rect parameter to a ModCS.Rect with the following parameters.","title":"ModCS.Rect.Set()"},{"location":"api/drawing/rect/#modcsrectput","text":"ModCS . Rect . Put ( rect , x , y , surface , alpha ) Draw the given Rect from the surface with ID surface to the screen with coordinates x and y . The alpha parameter is optional and is a Boolean. If set to false the game will draw the rect without removing any fully black pixels. The default value is true. Note For a more traditional PutBitmap usage you may use ModCS.Rect.PutEx() .","title":"ModCS.Rect.Put()"},{"location":"api/drawing/rect/#modcsrectput2surface","text":"ModCS . Rect . Put ( rect , x , y , surfacefrom , surfaceto ) Draw the given Rect from the surface with ID surfacefrom to the surface with ID surfaceto .","title":"ModCS.Rect.Put2Surface()"},{"location":"api/drawing/rect/#modcsrectputex","text":"ModCS . Rect . PutEx ( rect , viewrect , x , y , surface , alpha ) The same as ModCS.Rect.Put() but with a viewrect which limits the view.","title":"ModCS.Rect.PutEx()"},{"location":"api/drawing/surface/","text":"ModCS.Surface The ModCS.Surface class represents drawing surfaces. Surfaces are image data types which contain pixels of an image. Surface ID Table Surfaces are represented by an ID. This table contains all vanilla game surfaces. Value Description Additional Info 0 Title screen This surface is created from the bitmap file /data/Title.bmp . 1 Studio Pixel logo This surface is created from the bitmap file <game executable data>/BITMAP/PIXEL.bmp . 2 Level tileset This surface is used by the game to draw tiles. The game loads the tileset bitmap file specified in the Stage Table entry for each map to this surface when the player transfers to that map. This surface's size is 256x256. 6 Fade effect This surface is created from the bitmap file /data/Fade.bmp . 7 HUD This surface is exclusive to ModCS. The game draws all HUD elements to this surface. 8 Items This surface is created from the bitmap file /data/ItemImage.bmp . 9 Minimap This surface is used by the game to draw the Minimap. Its size is 320x240. 10 Screenshot This surface is used by the game to display game loops in other game loops. For example, when the player enters the inventory screen, the game screenshots itself and draws this screenshot to this surface. When the inventory screen is drawn the game first draws the screenshot surface as a background and then draws the inventory screen itself. This surface's size is 320x240. 11 Arms This surface is created from the bitmap file /data/Arms.bmp . 12 Arms Image This surface is created from the bitmap file /data/ArmsImage.bmp . 13 Room name This surface is used by the game for drawing the room name to. This surface's size is 160x16. 14 Stage item This surface is created from the bitmap file /data/StageImage.bmp . 15 Loading This surface is created from the bitmap file /data/Loading.bmp . 16 Player This surface is created from the bitmap file /data/MyChar.bmp . 17 Bullet This surface is created from the bitmap file /data/Bullet.bmp . 19 Caret This surface is created from the bitmap file /data/Caret.bmp . 20 NPC System This surface is created from the bitmap file /data/Npc/NpcSym.bmp . 21 NPC Spritesheet 1 The game loads the NPC Spritesheet 1 bitmap file specified in the Stage Table entry for each map to this surface when the player transfers to that map. This surface's size is 320x240. 22 NPC Spritesheet 2 The game loads the NPC Spritesheet 2 bitmap file specified in the Stage Table entry for each map to this surface when the player transfers to that map. This surface's size is 320x240. 23 NPC Regular This surface is created from the bitmap file /data/Npc/NpcRegu.bmp . 26 Textbox This surface is created from the bitmap file /data/TextBox.bmp . 27 Face This surface is created from the bitmap file /data/Face.bmp . 28 Level background The game loads the Background bitmap file specified in the Stage Table entry for each map to this surface when the player transfers to that map. This surface's size is 320x240. 29 Value view The game draws damage and XP indicators to this surface. This surface's size is 40x240. 30-34 Text line surfaces from 1 to 5 These surfaces are used by the game for drawing TSC text to. These surfaces are only initialized when TSC starts. Their size is 216x16. The game needs 5 of these for the text scrolling effect. 35 Credits text This surface is used by the game for drawing the credits text to. Its height varies on the credits TSC, but its width is 320. 36 Credits image This surface is created from the bitmap file <game executable data>/BITMAP/CREDIT01.bmp . It can be swapped with other CREDIT bitmaps during the credits TSC. 37 Casts This surface is created from the bitmap file /data/Npc/casts.bmp when the credits start. Note In the original game, more than 40 surfaces could not be created. In ModCS this number has been increased to 50 to allow for more custom surfaces. ModCS.Surface.Create() ModCS . Surface . Create ( id , width , height ) ModCS . Surface . Create ( id , path ) Create a surface. Returns a ModCS.Surface which contains the ID of the surface. If width and height are specified, create a generic surface with those sizes. If a path is specified, create a surface with the bitmap given in that path. The path's root is always the game's data folder. Do not add a .bmp file extension to the path. Surfaces created from bitmap files use the specified bitmap file's size. Example This example will create two surfaces, one basic and one from a file. 1 2 BarSurface = ModCS . Surface . Create ( 41 , 320 , 240 ) -- Create a surface with ID 41 with size 320x240 FooSurface = ModCS . Surface . Create ( 42 , \"Foo\" ) -- Create a surface with ID 42 using /data/Foo.bmp Note When creating custom surfaces, it's reccomended to use surface IDs over 40, as it's possible in the future for ModCS to add new custom surfaces below this number. ModCS.Surface.LoadBitmap() ModCS . Surface . LoadBitmap ( id , path ) Draw the bitmap file specified in path to a surface with ID id . The path's root is always the game's data folder. Do not add a .bmp file extension to the path.","title":"ModCS.Surface"},{"location":"api/drawing/surface/#modcssurface","text":"The ModCS.Surface class represents drawing surfaces. Surfaces are image data types which contain pixels of an image.","title":"ModCS.Surface"},{"location":"api/drawing/surface/#surface-id-table","text":"Surfaces are represented by an ID. This table contains all vanilla game surfaces. Value Description Additional Info 0 Title screen This surface is created from the bitmap file /data/Title.bmp . 1 Studio Pixel logo This surface is created from the bitmap file <game executable data>/BITMAP/PIXEL.bmp . 2 Level tileset This surface is used by the game to draw tiles. The game loads the tileset bitmap file specified in the Stage Table entry for each map to this surface when the player transfers to that map. This surface's size is 256x256. 6 Fade effect This surface is created from the bitmap file /data/Fade.bmp . 7 HUD This surface is exclusive to ModCS. The game draws all HUD elements to this surface. 8 Items This surface is created from the bitmap file /data/ItemImage.bmp . 9 Minimap This surface is used by the game to draw the Minimap. Its size is 320x240. 10 Screenshot This surface is used by the game to display game loops in other game loops. For example, when the player enters the inventory screen, the game screenshots itself and draws this screenshot to this surface. When the inventory screen is drawn the game first draws the screenshot surface as a background and then draws the inventory screen itself. This surface's size is 320x240. 11 Arms This surface is created from the bitmap file /data/Arms.bmp . 12 Arms Image This surface is created from the bitmap file /data/ArmsImage.bmp . 13 Room name This surface is used by the game for drawing the room name to. This surface's size is 160x16. 14 Stage item This surface is created from the bitmap file /data/StageImage.bmp . 15 Loading This surface is created from the bitmap file /data/Loading.bmp . 16 Player This surface is created from the bitmap file /data/MyChar.bmp . 17 Bullet This surface is created from the bitmap file /data/Bullet.bmp . 19 Caret This surface is created from the bitmap file /data/Caret.bmp . 20 NPC System This surface is created from the bitmap file /data/Npc/NpcSym.bmp . 21 NPC Spritesheet 1 The game loads the NPC Spritesheet 1 bitmap file specified in the Stage Table entry for each map to this surface when the player transfers to that map. This surface's size is 320x240. 22 NPC Spritesheet 2 The game loads the NPC Spritesheet 2 bitmap file specified in the Stage Table entry for each map to this surface when the player transfers to that map. This surface's size is 320x240. 23 NPC Regular This surface is created from the bitmap file /data/Npc/NpcRegu.bmp . 26 Textbox This surface is created from the bitmap file /data/TextBox.bmp . 27 Face This surface is created from the bitmap file /data/Face.bmp . 28 Level background The game loads the Background bitmap file specified in the Stage Table entry for each map to this surface when the player transfers to that map. This surface's size is 320x240. 29 Value view The game draws damage and XP indicators to this surface. This surface's size is 40x240. 30-34 Text line surfaces from 1 to 5 These surfaces are used by the game for drawing TSC text to. These surfaces are only initialized when TSC starts. Their size is 216x16. The game needs 5 of these for the text scrolling effect. 35 Credits text This surface is used by the game for drawing the credits text to. Its height varies on the credits TSC, but its width is 320. 36 Credits image This surface is created from the bitmap file <game executable data>/BITMAP/CREDIT01.bmp . It can be swapped with other CREDIT bitmaps during the credits TSC. 37 Casts This surface is created from the bitmap file /data/Npc/casts.bmp when the credits start. Note In the original game, more than 40 surfaces could not be created. In ModCS this number has been increased to 50 to allow for more custom surfaces.","title":"Surface ID Table"},{"location":"api/drawing/surface/#modcssurfacecreate","text":"ModCS . Surface . Create ( id , width , height ) ModCS . Surface . Create ( id , path ) Create a surface. Returns a ModCS.Surface which contains the ID of the surface. If width and height are specified, create a generic surface with those sizes. If a path is specified, create a surface with the bitmap given in that path. The path's root is always the game's data folder. Do not add a .bmp file extension to the path. Surfaces created from bitmap files use the specified bitmap file's size. Example This example will create two surfaces, one basic and one from a file. 1 2 BarSurface = ModCS . Surface . Create ( 41 , 320 , 240 ) -- Create a surface with ID 41 with size 320x240 FooSurface = ModCS . Surface . Create ( 42 , \"Foo\" ) -- Create a surface with ID 42 using /data/Foo.bmp Note When creating custom surfaces, it's reccomended to use surface IDs over 40, as it's possible in the future for ModCS to add new custom surfaces below this number.","title":"ModCS.Surface.Create()"},{"location":"api/drawing/surface/#modcssurfaceloadbitmap","text":"ModCS . Surface . LoadBitmap ( id , path ) Draw the bitmap file specified in path to a surface with ID id . The path's root is always the game's data folder. Do not add a .bmp file extension to the path.","title":"ModCS.Surface.LoadBitmap()"},{"location":"api/flags/flag/","text":"ModCS.Flag The ModCS.Flag namespace contains functions related to Flags. Flags are in-game \"switches\" that are used to record the player's progress, and are saved to the save file when the player saves the game. The maximum flag is 8000. Hardcoded flags There are two flags that change game properties outside of TSC: If flag 4000 is set, when the player drowns, instead of the normal drown event, event 1100 will start. This is used in the vanilla game for the after Core boss cutscene. If flag 563 is not set, the Curly AI NPC will not shoot bullets. (Citation needed) ModCS.Flag.Set() ModCS . Flag . Set ( no ) Sets (Or \"Switches on\") the flag no . ModCS.Flag.Unset() ModCS . Flag . UnSet ( no ) Unsets (Or \"Switches off\") the flag no . ModCS.Flag.Get() ModCS . Flag . Get ( no ) Returns true if the flag no is set. Returns false otherwise.","title":"ModCS.Flag"},{"location":"api/flags/flag/#modcsflag","text":"The ModCS.Flag namespace contains functions related to Flags. Flags are in-game \"switches\" that are used to record the player's progress, and are saved to the save file when the player saves the game. The maximum flag is 8000.","title":"ModCS.Flag"},{"location":"api/flags/flag/#hardcoded-flags","text":"There are two flags that change game properties outside of TSC: If flag 4000 is set, when the player drowns, instead of the normal drown event, event 1100 will start. This is used in the vanilla game for the after Core boss cutscene. If flag 563 is not set, the Curly AI NPC will not shoot bullets. (Citation needed)","title":"Hardcoded flags"},{"location":"api/flags/flag/#modcsflagset","text":"ModCS . Flag . Set ( no ) Sets (Or \"Switches on\") the flag no .","title":"ModCS.Flag.Set()"},{"location":"api/flags/flag/#modcsflagunset","text":"ModCS . Flag . UnSet ( no ) Unsets (Or \"Switches off\") the flag no .","title":"ModCS.Flag.Unset()"},{"location":"api/flags/flag/#modcsflagget","text":"ModCS . Flag . Get ( no ) Returns true if the flag no is set. Returns false otherwise.","title":"ModCS.Flag.Get()"},{"location":"api/flags/skipflag/","text":"ModCS.SkipFlag The ModCS.SkipFlag namespace contains functions related to Skipflags. Unlike Flags Skipflags do not save to the save file and will reset if the player closes the game. They are used if the player dies after viewing a long cutscene and would have to rewatch a cutscene if a skipflag was not used for it. The maximum skipflag is 64. ModCS.SkipFlag.Set() ModCS . SkipFlag . Set ( no ) Sets (Or \"Switches on\") the skipflag no . ModCS.SkipFlag.Unset() ModCS . SkipFlag . UnSet ( no ) Unsets (Or \"Switches off\") the skipflag no . ModCS.SkipFlag.Get() ModCS . SkipFlag . Get ( no ) Returns true if the skipflag no is set. Returns false otherwise.","title":"ModCS.SkipFlag"},{"location":"api/flags/skipflag/#modcsskipflag","text":"The ModCS.SkipFlag namespace contains functions related to Skipflags. Unlike Flags Skipflags do not save to the save file and will reset if the player closes the game. They are used if the player dies after viewing a long cutscene and would have to rewatch a cutscene if a skipflag was not used for it. The maximum skipflag is 64.","title":"ModCS.SkipFlag"},{"location":"api/flags/skipflag/#modcsskipflagset","text":"ModCS . SkipFlag . Set ( no ) Sets (Or \"Switches on\") the skipflag no .","title":"ModCS.SkipFlag.Set()"},{"location":"api/flags/skipflag/#modcsskipflagunset","text":"ModCS . SkipFlag . UnSet ( no ) Unsets (Or \"Switches off\") the skipflag no .","title":"ModCS.SkipFlag.Unset()"},{"location":"api/flags/skipflag/#modcsskipflagget","text":"ModCS . SkipFlag . Get ( no ) Returns true if the skipflag no is set. Returns false otherwise.","title":"ModCS.SkipFlag.Get()"},{"location":"api/objects/direction/","text":"Direction Directions in Cave Story are represented by numbers. Value Direction 0 Left 1 Up 2 Right 3 Down 4 Auto Different objects interpret their direction parameter differently, although most of them follow this pattern. The Player and most NPCs only use the left and right directions.","title":"Direction"},{"location":"api/objects/direction/#direction","text":"Directions in Cave Story are represented by numbers. Value Direction 0 Left 1 Up 2 Right 3 Down 4 Auto Different objects interpret their direction parameter differently, although most of them follow this pattern. The Player and most NPCs only use the left and right directions.","title":"Direction"},{"location":"api/objects/npc/","text":"ModCS.Npc The ModCS.Npc class represents NPCs (Also known as Entities). NPCs are game objects used for enemies, cutscenes, enemy projectiles and (some) bosses. Examples are Toroko, First Cave Critter, Puu Black, etc. A ModCS.Npc is userdata. You may access and edit the following values from it: Value Type Usage x Pixel Unit X position of the NPC. y Pixel Unit Y position of the NPC. xm Pixel Unit X velocity of the NPC. This value does nothing by itself, but can be used with ModCS.Npc.Move() . ym Pixel Unit Y velocity of the NPC. This value does nothing by itself, but can be used with ModCS.Npc.Move() . xm2 Pixel Unit Alternative X velocity of the NPC. This value does nothing by itself, but can be used with ModCS.Npc.Move2() . xm2 Pixel Unit Alternative Y velocity of the NPC. This value does nothing by itself, but can be used with ModCS.Npc.Move2() . id NPC Type ID ID of the NPC. flag Number (Casted to integer) Flag of the NPC. event Event TSC Event of the NPC. surf Surface The surface that the NPC will draw from. hit_voice Sound ID The sound effect that will play when the NPC gets hit. destroy_voice Sound ID The sound effect that will play when the NPC dies. life Number (Casted to integer) The health points of the NPC. damage Number (Casted to integer) The amount of damage the NPC deals to the player upon touching. exp Number (Casted to integer) The XP worth of the NPC. smoke_size Number (Casted to integer) The amount of smoke the NPC will spawn after dying. Can be from 0 to 3 (0 being no smoke being spawned upon death). direct Direction Direction of the NPC. ani_no Number (Casted to integer) Animation frame value. This variable does nothing by itself, but can be used to switch between animation frames. ani_wait Number (Casted to integer) Animation timer value. This variable does nothing by itself, but can be used as a timer between animation frames. act_no Number (Casted to integer) Act state value. This variable does nothing by itself, but can be changed with the <ANP TSC command. act_wait Number (Casted to integer) Act state timer value. This variable does nothing by itself, but can be used as a timer between act states. pNpc NPC Parent NPC value. The NPC Buffer Spawned NPCs in Cave Story are stored in a buffer (or list) of 512 entries. Although the NPC buffer size is 512, the game starts spawning NPCs at different positions in the buffer in different places. Examples include: NPCs loaded from a PXE file start from 170. NPCs spawned by <SNP start from 256. Water splash entities start from 0. When the game spawns NPCs it checks trough the NPC buffer and finds a spot that's not currently occupied by an alive NPC and replaces that spot with the NPC it's spawning. When the NPC in that spot dies, the spot is freed out for when the game decides to spawn another NPC again. Warning If you will be using any of the following functions for actively updating an NPC you will have to actively retrieve the NPC as well. ModCS.Npc.GetByEvent() ModCS . Npc . GetByEvent ( event ) Searches the current buffer of spawned NPCs for one with an Event number event and returns a ModCS.Npc of that NPC. Returns a nil otherwise. ModCS.Npc.Spawn() ModCS . Npc . Spawn ( npctype , x , y , start_index ) Spawns an NPC of NPC Type npctype on Pixel Unit coordinates x and y . If start_index is specified the NPC buffer start position for the NPC summon will be start_index . Otherwise the NPC buffer start position will be 256. Returns a ModCS.Npc of the spawned NPC. ModCS.Npc.GetByBufferIndex() ModCS . Npc . GetByBufferIndex ( index ) Directly gets index NPC from the NPC buffer.","title":"ModCS.Npc"},{"location":"api/objects/npc/#modcsnpc","text":"The ModCS.Npc class represents NPCs (Also known as Entities). NPCs are game objects used for enemies, cutscenes, enemy projectiles and (some) bosses. Examples are Toroko, First Cave Critter, Puu Black, etc. A ModCS.Npc is userdata. You may access and edit the following values from it: Value Type Usage x Pixel Unit X position of the NPC. y Pixel Unit Y position of the NPC. xm Pixel Unit X velocity of the NPC. This value does nothing by itself, but can be used with ModCS.Npc.Move() . ym Pixel Unit Y velocity of the NPC. This value does nothing by itself, but can be used with ModCS.Npc.Move() . xm2 Pixel Unit Alternative X velocity of the NPC. This value does nothing by itself, but can be used with ModCS.Npc.Move2() . xm2 Pixel Unit Alternative Y velocity of the NPC. This value does nothing by itself, but can be used with ModCS.Npc.Move2() . id NPC Type ID ID of the NPC. flag Number (Casted to integer) Flag of the NPC. event Event TSC Event of the NPC. surf Surface The surface that the NPC will draw from. hit_voice Sound ID The sound effect that will play when the NPC gets hit. destroy_voice Sound ID The sound effect that will play when the NPC dies. life Number (Casted to integer) The health points of the NPC. damage Number (Casted to integer) The amount of damage the NPC deals to the player upon touching. exp Number (Casted to integer) The XP worth of the NPC. smoke_size Number (Casted to integer) The amount of smoke the NPC will spawn after dying. Can be from 0 to 3 (0 being no smoke being spawned upon death). direct Direction Direction of the NPC. ani_no Number (Casted to integer) Animation frame value. This variable does nothing by itself, but can be used to switch between animation frames. ani_wait Number (Casted to integer) Animation timer value. This variable does nothing by itself, but can be used as a timer between animation frames. act_no Number (Casted to integer) Act state value. This variable does nothing by itself, but can be changed with the <ANP TSC command. act_wait Number (Casted to integer) Act state timer value. This variable does nothing by itself, but can be used as a timer between act states. pNpc NPC Parent NPC value.","title":"ModCS.Npc"},{"location":"api/objects/npc/#the-npc-buffer","text":"Spawned NPCs in Cave Story are stored in a buffer (or list) of 512 entries. Although the NPC buffer size is 512, the game starts spawning NPCs at different positions in the buffer in different places. Examples include: NPCs loaded from a PXE file start from 170. NPCs spawned by <SNP start from 256. Water splash entities start from 0. When the game spawns NPCs it checks trough the NPC buffer and finds a spot that's not currently occupied by an alive NPC and replaces that spot with the NPC it's spawning. When the NPC in that spot dies, the spot is freed out for when the game decides to spawn another NPC again. Warning If you will be using any of the following functions for actively updating an NPC you will have to actively retrieve the NPC as well.","title":"The NPC Buffer"},{"location":"api/objects/npc/#modcsnpcgetbyevent","text":"ModCS . Npc . GetByEvent ( event ) Searches the current buffer of spawned NPCs for one with an Event number event and returns a ModCS.Npc of that NPC. Returns a nil otherwise.","title":"ModCS.Npc.GetByEvent()"},{"location":"api/objects/npc/#modcsnpcspawn","text":"ModCS . Npc . Spawn ( npctype , x , y , start_index ) Spawns an NPC of NPC Type npctype on Pixel Unit coordinates x and y . If start_index is specified the NPC buffer start position for the NPC summon will be start_index . Otherwise the NPC buffer start position will be 256. Returns a ModCS.Npc of the spawned NPC.","title":"ModCS.Npc.Spawn()"},{"location":"api/objects/npc/#modcsnpcgetbybufferindex","text":"ModCS . Npc . GetByBufferIndex ( index ) Directly gets index NPC from the NPC buffer.","title":"ModCS.Npc.GetByBufferIndex()"},{"location":"api/objects/pixel/","text":"Pixel Unit A Pixel Unit represents an in-game space coordinate. While sprites on the screen use screen coordinates, objects such as NPCs , Carets , etc. use pixel units. You may use nonintegral values as pixel units but they will always be rounded to the nearest subpixel (1/512th of a pixel).","title":"Pixel Unit"},{"location":"api/objects/pixel/#pixel-unit","text":"A Pixel Unit represents an in-game space coordinate. While sprites on the screen use screen coordinates, objects such as NPCs , Carets , etc. use pixel units. You may use nonintegral values as pixel units but they will always be rounded to the nearest subpixel (1/512th of a pixel).","title":"Pixel Unit"},{"location":"api/objects/player/","text":"ModCS.Player The ModCS.Player global object represents the player (Also known as My Character/ MYC). ModCS.Player is userdata. You may access and edit the following values from it: Value Type Usage x Pixel Unit The player's X position. y Pixel Unit The player's Y position. air Number (Casted to integer) Air value of the player. direct Direction The player's direction. ModCS.Player.IsHit() ModCS . Player . IsHit () Returns true if the player is being hit. Returns false otherwise. ModCS.Player.IsLookingDown() ModCS . Player . IsLookingDown () Returns true if the player is looking down. Returns false otherwise. ModCS.Player.IsLookingUp() ModCS . Player . IsLookingUp () Returns true if the player is looking up. Returns false otherwise. ModCS.Player.GetLife() ModCS . Player . GetLife () Returns the player's current life points. ModCS.Player.AddLife() ModCS . Player . AddLife ( life ) Adds life to the player's life points. ModCS.Player.AddMaxLife() ModCS . Player . AddLife ( life ) Adds life to the player's max life points. ModCS.Player.Damage() ModCS . Player . Damage ( damage ) Damages the player by damage .","title":"ModCS.Player"},{"location":"api/objects/player/#modcsplayer","text":"The ModCS.Player global object represents the player (Also known as My Character/ MYC). ModCS.Player is userdata. You may access and edit the following values from it: Value Type Usage x Pixel Unit The player's X position. y Pixel Unit The player's Y position. air Number (Casted to integer) Air value of the player. direct Direction The player's direction.","title":"ModCS.Player"},{"location":"api/objects/player/#modcsplayerishit","text":"ModCS . Player . IsHit () Returns true if the player is being hit. Returns false otherwise.","title":"ModCS.Player.IsHit()"},{"location":"api/objects/player/#modcsplayerislookingdown","text":"ModCS . Player . IsLookingDown () Returns true if the player is looking down. Returns false otherwise.","title":"ModCS.Player.IsLookingDown()"},{"location":"api/objects/player/#modcsplayerislookingup","text":"ModCS . Player . IsLookingUp () Returns true if the player is looking up. Returns false otherwise.","title":"ModCS.Player.IsLookingUp()"},{"location":"api/objects/player/#modcsplayergetlife","text":"ModCS . Player . GetLife () Returns the player's current life points.","title":"ModCS.Player.GetLife()"},{"location":"api/objects/player/#modcsplayeraddlife","text":"ModCS . Player . AddLife ( life ) Adds life to the player's life points.","title":"ModCS.Player.AddLife()"},{"location":"api/objects/player/#modcsplayeraddmaxlife","text":"ModCS . Player . AddLife ( life ) Adds life to the player's max life points.","title":"ModCS.Player.AddMaxLife()"},{"location":"api/objects/player/#modcsplayerdamage","text":"ModCS . Player . Damage ( damage ) Damages the player by damage .","title":"ModCS.Player.Damage()"},{"location":"api/objects/range/","text":"ModCS.RangeRect The ModCS.RangeRect class represents Range Rects (Also known as Other Rects). Unlike Drawing Rects Range Rects are centered rectangles. They are used for things such as NPC hitboxes . A ModCS.Rect is userdata. You may access and edit the following values from it: Value Type Usage front Number (Casted to integer) The radius from the center to the left side of the rectangle. top Number (Casted to integer) The radius from the center to the top side of the rectangle. back Number (Casted to integer) The radius from the center to the right side of the rectangle. bottom Number (Casted to integer) The radius from the center to the bottom side of the rectangle. ModCS.RangeRect.Create() ModCS . RangeRect . Create ( front , top , back , bottom ) Returns a ModCS.RangeRect. All parameters are optional. If any parameters are given, the returned ModCS.RangeRect will use those parameters as Range Rect values. ModCS.RangeRect.Set() ModCS . RangeRect . Set ( rect , front , top , back , bottom ) Sets the ModCS.RangeRect given in the rect parameter to a ModCS.RangeRect with the following parameters.","title":"ModCS.RangeRect"},{"location":"api/objects/range/#modcsrangerect","text":"The ModCS.RangeRect class represents Range Rects (Also known as Other Rects). Unlike Drawing Rects Range Rects are centered rectangles. They are used for things such as NPC hitboxes . A ModCS.Rect is userdata. You may access and edit the following values from it: Value Type Usage front Number (Casted to integer) The radius from the center to the left side of the rectangle. top Number (Casted to integer) The radius from the center to the top side of the rectangle. back Number (Casted to integer) The radius from the center to the right side of the rectangle. bottom Number (Casted to integer) The radius from the center to the bottom side of the rectangle.","title":"ModCS.RangeRect"},{"location":"api/objects/range/#modcsrangerectcreate","text":"ModCS . RangeRect . Create ( front , top , back , bottom ) Returns a ModCS.RangeRect. All parameters are optional. If any parameters are given, the returned ModCS.RangeRect will use those parameters as Range Rect values.","title":"ModCS.RangeRect.Create()"},{"location":"api/objects/range/#modcsrangerectset","text":"ModCS . RangeRect . Set ( rect , front , top , back , bottom ) Sets the ModCS.RangeRect given in the rect parameter to a ModCS.RangeRect with the following parameters.","title":"ModCS.RangeRect.Set()"},{"location":"api/objects/npc/bits/","text":"NPC Bits NPC Bits (Also known as NPC Flags) are toggles on NPCs that enable certain NPC features. They can be turned on for individual NPC Types as well as for individual NPCs in a PXE file. Note In the original game NPC Bits are bit-wise. Because of this, many editors show bitwise information for them. For simplicity's sake ModCS uses normal decimal values. Value Bitwise Value Usage 0 0x0001 Collision against player - Pushes player out. 1 0x0002 Ignore tile attribute 44. 2 0x0004 Cannot be hurt and has a different hit effect when hit by a bullet. 3 0x0008 Ignore tile collision. 4 0x0010 The top of the NPC is bouncy. 5 0x0020 The NPC is shootable. 6 0x0040 Collision against player. 7 0x0080 Rear and top of the NPC does not hurt the player. 8 0x0100 The TSC Event specified in the event parameter of the ModCS.Npc will run when the player touches the NPC. 9 0x0200 The TSC Event specified in the event parameter of the ModCS.Npc will run when the NPC dies. 11 0x0800 The NPC will not spawn unless the Flag specified in the flag parameter of ModCS.Npc is set. 12 0x1000 The NPC will spawn with the direct parameter of the ModCS.Npc being set to 2. 13 0x2000 If the player interacts with the NPC the TSC Event specified in the event parameter of the ModCS.Npc will run. 14 0x4000 The NPC will not spawn if the Flag specified in the flag parameter of ModCS.Npc is set. 15 0x8000 Damage dealt to the NPC will show in a damage indicator. ModCS.Npc.SetBit() ModCS . Npc . SetBit ( npc , bit ) Sets the bit bit for npc . ModCS.Npc.UnsetBit() ModCS . Npc . UnsetBit ( npc , bit ) Unsets the bit bit for npc .","title":"NPC Bits"},{"location":"api/objects/npc/bits/#npc-bits","text":"NPC Bits (Also known as NPC Flags) are toggles on NPCs that enable certain NPC features. They can be turned on for individual NPC Types as well as for individual NPCs in a PXE file. Note In the original game NPC Bits are bit-wise. Because of this, many editors show bitwise information for them. For simplicity's sake ModCS uses normal decimal values. Value Bitwise Value Usage 0 0x0001 Collision against player - Pushes player out. 1 0x0002 Ignore tile attribute 44. 2 0x0004 Cannot be hurt and has a different hit effect when hit by a bullet. 3 0x0008 Ignore tile collision. 4 0x0010 The top of the NPC is bouncy. 5 0x0020 The NPC is shootable. 6 0x0040 Collision against player. 7 0x0080 Rear and top of the NPC does not hurt the player. 8 0x0100 The TSC Event specified in the event parameter of the ModCS.Npc will run when the player touches the NPC. 9 0x0200 The TSC Event specified in the event parameter of the ModCS.Npc will run when the NPC dies. 11 0x0800 The NPC will not spawn unless the Flag specified in the flag parameter of ModCS.Npc is set. 12 0x1000 The NPC will spawn with the direct parameter of the ModCS.Npc being set to 2. 13 0x2000 If the player interacts with the NPC the TSC Event specified in the event parameter of the ModCS.Npc will run. 14 0x4000 The NPC will not spawn if the Flag specified in the flag parameter of ModCS.Npc is set. 15 0x8000 Damage dealt to the NPC will show in a damage indicator.","title":"NPC Bits"},{"location":"api/objects/npc/bits/#modcsnpcsetbit","text":"ModCS . Npc . SetBit ( npc , bit ) Sets the bit bit for npc .","title":"ModCS.Npc.SetBit()"},{"location":"api/objects/npc/bits/#modcsnpcunsetbit","text":"ModCS . Npc . UnsetBit ( npc , bit ) Unsets the bit bit for npc .","title":"ModCS.Npc.UnsetBit()"},{"location":"api/objects/npc/collision/","text":"NPC Collision detection ModCS.Npc.TouchLeftWall() ModCS . Npc . TouchLeftWall ( npc ) Returns true if npc is touching a left wall. ModCS.Npc.TouchRightWall() ModCS . Npc . TouchRightWall ( npc ) Returns true if npc is touching a right wall. ModCS.Npc.TouchCeiling() ModCS . Npc . TouchCeiling ( npc ) Returns true if npc is touching a ceiling. ModCS.Npc.TouchFloor() ModCS . Npc . TouchFloor ( npc ) Returns true if npc is touching a floor. ModCS.Npc.TouchSlopeRight() ModCS . Npc . TouchSlopeRight ( npc ) Returns true if npc is touching a right slope. ModCS.Npc.TouchSlopeLeft() ModCS . Npc . TouchSlopeLeft ( npc ) Returns true if npc is touching a left slope. ModCS.Npc.TouchTile() ModCS . Npc . TouchTile ( npc ) Returns true if npc is touching any type of collision tile.","title":"NPC Collision detection"},{"location":"api/objects/npc/collision/#npc-collision-detection","text":"","title":"NPC Collision detection"},{"location":"api/objects/npc/collision/#modcsnpctouchleftwall","text":"ModCS . Npc . TouchLeftWall ( npc ) Returns true if npc is touching a left wall.","title":"ModCS.Npc.TouchLeftWall()"},{"location":"api/objects/npc/collision/#modcsnpctouchrightwall","text":"ModCS . Npc . TouchRightWall ( npc ) Returns true if npc is touching a right wall.","title":"ModCS.Npc.TouchRightWall()"},{"location":"api/objects/npc/collision/#modcsnpctouchceiling","text":"ModCS . Npc . TouchCeiling ( npc ) Returns true if npc is touching a ceiling.","title":"ModCS.Npc.TouchCeiling()"},{"location":"api/objects/npc/collision/#modcsnpctouchfloor","text":"ModCS . Npc . TouchFloor ( npc ) Returns true if npc is touching a floor.","title":"ModCS.Npc.TouchFloor()"},{"location":"api/objects/npc/collision/#modcsnpctouchsloperight","text":"ModCS . Npc . TouchSlopeRight ( npc ) Returns true if npc is touching a right slope.","title":"ModCS.Npc.TouchSlopeRight()"},{"location":"api/objects/npc/collision/#modcsnpctouchslopeleft","text":"ModCS . Npc . TouchSlopeLeft ( npc ) Returns true if npc is touching a left slope.","title":"ModCS.Npc.TouchSlopeLeft()"},{"location":"api/objects/npc/collision/#modcsnpctouchtile","text":"ModCS . Npc . TouchTile ( npc ) Returns true if npc is touching any type of collision tile.","title":"ModCS.Npc.TouchTile()"},{"location":"api/objects/npc/functions/","text":"NPC Manipulation Functions ModCS.Npc.SetRect() ModCS . Npc . SetRect ( npc , left , top , right , bottom ) ModCS . Npc . SetRect ( npc , rect ) Sets the Rect of npc to a Rect with left , top , right , bottom . If a rect is specified, set the Rect of npc to that Rect instead. ModCS.Npc.SetHitbox() ModCS . Npc . SetHitbox ( npc , front , top , back , bottom ) ModCS . Npc . SetHitbox ( npc , rangerect ) Sets the hitbox of npc to a RangeRect with front , top , back , bottom . If a rangerect is specified, set the hitbox of npc to that RangeRect instead. Warning When editing NPC hitboxes make sure that the front and back values of the hitbox are the same, otherwise you might get weird hitbox behavior. ModCS.Npc.SetViewbox() ModCS . Npc . SetViewbox ( npc , front , top , back , bottom ) ModCS . Npc . SetViewbox ( npc , rangerect ) Sets the sprite offset of npc to a RangeRect with front , top , back , bottom . If a rangerect is specified, set the sprite offset of npc to that RangeRect instead. ModCS.Npc.ActCode() ModCS . Npc . ActCode ( npc , npctype ) Runs the action code for NPC Type npctype to npc . Note This will run the vanilla act code for npctype . To run any overwritten act functions, run ModCS.Npc.ActX(npc) instead (where X is the NPC Type ID). ModCS.Npc.IsHit() ModCS . Npc . IsHit ( npc ) Returns true if npc is being hit by a bullet. Returns false otherwise. ModCS.Npc.Delete() ModCS . Npc . Delete ( npc ) Deletes npc . Same effect as <DNP . ModCS.Npc..DeleteOnNextFrame() ModCS . Npc . DeleteOnNextFrame ( npc ) Sets npc for deletion on the next frame. ModCS.Npc.Destroy() ModCS . Npc . Destroy ( npc ) Kills npc . ModCS.Npc.Move() ModCS . Npc . Move ( npc ) Adds xm and ym of npc to npc 's x and y . ModCS.Npc.Move2() ModCS . Npc . Move2 ( npc ) Adds xm2 and ym2 of npc to npc 's x and y .","title":"NPC Manipulation Functions"},{"location":"api/objects/npc/functions/#npc-manipulation-functions","text":"","title":"NPC Manipulation Functions"},{"location":"api/objects/npc/functions/#modcsnpcsetrect","text":"ModCS . Npc . SetRect ( npc , left , top , right , bottom ) ModCS . Npc . SetRect ( npc , rect ) Sets the Rect of npc to a Rect with left , top , right , bottom . If a rect is specified, set the Rect of npc to that Rect instead.","title":"ModCS.Npc.SetRect()"},{"location":"api/objects/npc/functions/#modcsnpcsethitbox","text":"ModCS . Npc . SetHitbox ( npc , front , top , back , bottom ) ModCS . Npc . SetHitbox ( npc , rangerect ) Sets the hitbox of npc to a RangeRect with front , top , back , bottom . If a rangerect is specified, set the hitbox of npc to that RangeRect instead. Warning When editing NPC hitboxes make sure that the front and back values of the hitbox are the same, otherwise you might get weird hitbox behavior.","title":"ModCS.Npc.SetHitbox()"},{"location":"api/objects/npc/functions/#modcsnpcsetviewbox","text":"ModCS . Npc . SetViewbox ( npc , front , top , back , bottom ) ModCS . Npc . SetViewbox ( npc , rangerect ) Sets the sprite offset of npc to a RangeRect with front , top , back , bottom . If a rangerect is specified, set the sprite offset of npc to that RangeRect instead.","title":"ModCS.Npc.SetViewbox()"},{"location":"api/objects/npc/functions/#modcsnpcactcode","text":"ModCS . Npc . ActCode ( npc , npctype ) Runs the action code for NPC Type npctype to npc . Note This will run the vanilla act code for npctype . To run any overwritten act functions, run ModCS.Npc.ActX(npc) instead (where X is the NPC Type ID).","title":"ModCS.Npc.ActCode()"},{"location":"api/objects/npc/functions/#modcsnpcishit","text":"ModCS . Npc . IsHit ( npc ) Returns true if npc is being hit by a bullet. Returns false otherwise.","title":"ModCS.Npc.IsHit()"},{"location":"api/objects/npc/functions/#modcsnpcdelete","text":"ModCS . Npc . Delete ( npc ) Deletes npc . Same effect as <DNP .","title":"ModCS.Npc.Delete()"},{"location":"api/objects/npc/functions/#modcsnpcdeleteonnextframe","text":"ModCS . Npc . DeleteOnNextFrame ( npc ) Sets npc for deletion on the next frame.","title":"ModCS.Npc..DeleteOnNextFrame()"},{"location":"api/objects/npc/functions/#modcsnpcdestroy","text":"ModCS . Npc . Destroy ( npc ) Kills npc .","title":"ModCS.Npc.Destroy()"},{"location":"api/objects/npc/functions/#modcsnpcmove","text":"ModCS . Npc . Move ( npc ) Adds xm and ym of npc to npc 's x and y .","title":"ModCS.Npc.Move()"},{"location":"api/objects/npc/functions/#modcsnpcmove2","text":"ModCS . Npc . Move2 ( npc ) Adds xm2 and ym2 of npc to npc 's x and y .","title":"ModCS.Npc.Move2()"},{"location":"api/objects/npc/id/","text":"NPC Type IDs An NPC Type ID (Also known as Act ID or character code) is a number that defines an NPC's type. NPC Table A table of default NPC properties are stored in a npc.tbl file in the data folder. You may edit this table with your favorite Cave Story editor. When NPCs of a set type are spawned they will initially properties from their NPC Table entry, although these properties can be changed for NPCs with scripting at any time. Note Some vanilla NPCs change their damage or other features gotten from the NPC Table dynamically. Changing the NPC Table properties on these NPCs will most likely have little effect. NPC Table parameters on different editors Different Cave Story editors use different terminology on NPC Table parameters. This section translates all of them to ModCS API equivalents. Booster's Lab The King's Table Cave Editor life parameter of a ModCS.Npc damage parameter of a ModCS.Npc exp parameter of a ModCS.Npc NPC Bits NPC Hitbox NPC Viewbox surf parameter of a ModCS.Npc hit_voice parameter of a ModCS.Npc destroy_voice parameter of a ModCS.Npc smoke_size parameter of a ModCS.Npc NPC Type reference ... Here I would put my own NPC Type reference table but I'm currently too lazy. Please refer to your map editor's NPC list or this Cave Story NPC Spreadsheet instead. Overriding NPCs ModCS allows you to override an NPC type's act code. If a function ModCS.Npc.ActX (where X is the NPC Type ID of the NPC Type you want to override) is defined in your Lua script the game will run that function instead of the built-in NPC act code. A ModCS.Npc will be passed as the first argument of the function when it's called. Example This example will set the Rect of NPC Type 0 (The Null NPC) to 16,0,32,16. 1 2 3 function ModCS . Npc . Act0 ( npc ) npc : SetRect ( 16 , 0 , 32 , 16 ) end","title":"NPC Type IDs"},{"location":"api/objects/npc/id/#npc-type-ids","text":"An NPC Type ID (Also known as Act ID or character code) is a number that defines an NPC's type.","title":"NPC Type IDs"},{"location":"api/objects/npc/id/#npc-table","text":"A table of default NPC properties are stored in a npc.tbl file in the data folder. You may edit this table with your favorite Cave Story editor. When NPCs of a set type are spawned they will initially properties from their NPC Table entry, although these properties can be changed for NPCs with scripting at any time. Note Some vanilla NPCs change their damage or other features gotten from the NPC Table dynamically. Changing the NPC Table properties on these NPCs will most likely have little effect. NPC Table parameters on different editors Different Cave Story editors use different terminology on NPC Table parameters. This section translates all of them to ModCS API equivalents. Booster's Lab The King's Table Cave Editor life parameter of a ModCS.Npc damage parameter of a ModCS.Npc exp parameter of a ModCS.Npc NPC Bits NPC Hitbox NPC Viewbox surf parameter of a ModCS.Npc hit_voice parameter of a ModCS.Npc destroy_voice parameter of a ModCS.Npc smoke_size parameter of a ModCS.Npc","title":"NPC Table"},{"location":"api/objects/npc/id/#npc-type-reference","text":"... Here I would put my own NPC Type reference table but I'm currently too lazy. Please refer to your map editor's NPC list or this Cave Story NPC Spreadsheet instead.","title":"NPC Type reference"},{"location":"api/objects/npc/id/#overriding-npcs","text":"ModCS allows you to override an NPC type's act code. If a function ModCS.Npc.ActX (where X is the NPC Type ID of the NPC Type you want to override) is defined in your Lua script the game will run that function instead of the built-in NPC act code. A ModCS.Npc will be passed as the first argument of the function when it's called. Example This example will set the Rect of NPC Type 0 (The Null NPC) to 16,0,32,16. 1 2 3 function ModCS . Npc . Act0 ( npc ) npc : SetRect ( 16 , 0 , 32 , 16 ) end","title":"Overriding NPCs"},{"location":"api/objects/player/collision/","text":"Player Collision detection ModCS.Player.TouchLeftWall() ModCS . Player . TouchLeftWall () Returns true if the player is touching a left wall. ModCS.Player.TouchRightWall() ModCS . Player . TouchRightWall () Returns true if the player is touching a right wall. ModCS.Player.TouchCeiling() ModCS . Player . TouchCeiling () Returns true if the player is touching a ceiling. ModCS.Player.TouchFloor() ModCS . Player . TouchFloor () Returns true if the player is touching a floor. ModCS.Player.TouchSlopeRight() ModCS . Player . TouchSlopeRight () Returns true if the player is touching a right slope. ModCS.Player.TouchSlopeLeft() ModCS . Player . TouchSlopeLeft () Returns true if the player is touching a left slope. ModCS.Player.TouchTile() ModCS . Player . TouchTile () Returns true if the player is touching any type of collision tile.","title":"Player Collision detection"},{"location":"api/objects/player/collision/#player-collision-detection","text":"","title":"Player Collision detection"},{"location":"api/objects/player/collision/#modcsplayertouchleftwall","text":"ModCS . Player . TouchLeftWall () Returns true if the player is touching a left wall.","title":"ModCS.Player.TouchLeftWall()"},{"location":"api/objects/player/collision/#modcsplayertouchrightwall","text":"ModCS . Player . TouchRightWall () Returns true if the player is touching a right wall.","title":"ModCS.Player.TouchRightWall()"},{"location":"api/objects/player/collision/#modcsplayertouchceiling","text":"ModCS . Player . TouchCeiling () Returns true if the player is touching a ceiling.","title":"ModCS.Player.TouchCeiling()"},{"location":"api/objects/player/collision/#modcsplayertouchfloor","text":"ModCS . Player . TouchFloor () Returns true if the player is touching a floor.","title":"ModCS.Player.TouchFloor()"},{"location":"api/objects/player/collision/#modcsplayertouchsloperight","text":"ModCS . Player . TouchSlopeRight () Returns true if the player is touching a right slope.","title":"ModCS.Player.TouchSlopeRight()"},{"location":"api/objects/player/collision/#modcsplayertouchslopeleft","text":"ModCS . Player . TouchSlopeLeft () Returns true if the player is touching a left slope.","title":"ModCS.Player.TouchSlopeLeft()"},{"location":"api/objects/player/collision/#modcsplayertouchtile","text":"ModCS . Player . TouchTile () Returns true if the player is touching any type of collision tile.","title":"ModCS.Player.TouchTile()"},{"location":"api/sound/organya/","text":"ModCS.Organya The ModCS.Organya namespace contains functions related to playing Organya music. Music ID reference Music ID Name Internal Name 0 None XXXX 1 Mischievous Robot WANPAKU 2 Safety ANZEN 3 Game Over GAMEOVER 4 Gravity GRAVITY 5 On To Grasstown WEED 6 Meltdown 2 MDOWN2 7 Eyes of Flame FIREEYE 8 Gestation VIVI 9 Mimiga Town MURA 10 Get Item FANFALE1 11 Balrog's Theme GINSUKE 12 Cemetery CEMETERY 13 Plant PLANT 14 Pulse KODOU 15 Victory FANFALE3 16 Get Life Capsule FANFALE2 17 Tyrant DR 18 Run ESCAPE 19 Jenka 1 JENKA 20 Labyrinth Fight MAZE 21 Access ACCESS 22 Oppression IRONH 23 Geothermal GRAND 24 Cave Story CURLY 25 Moonsong OSIDE 26 Hero's End REQUIEM 27 Scorching Back WANPAK2 28 Quiet QUIET 29 Final Cave LASTCAVE 30 Balcony BALCONY 31 Charge LASTBTL 32 Last Battle LASTBT3 33 The Way Back Home ENDING 34 Zombie ZONBIE 35 Break Down BDOWN 36 Running Hell HELL 37 Jenka 2 JENKA2 38 Living Waterway MARINE 39 Seal Chamber BALLOS 40 Toroko's Theme TOROKO 41 White Stone Wall WHITE ModCS.Organya.Play() ModCS . Organya . Play ( id ) Changes the current music playing to music id .","title":"ModCS.Organya"},{"location":"api/sound/organya/#modcsorganya","text":"The ModCS.Organya namespace contains functions related to playing Organya music.","title":"ModCS.Organya"},{"location":"api/sound/organya/#music-id-reference","text":"Music ID Name Internal Name 0 None XXXX 1 Mischievous Robot WANPAKU 2 Safety ANZEN 3 Game Over GAMEOVER 4 Gravity GRAVITY 5 On To Grasstown WEED 6 Meltdown 2 MDOWN2 7 Eyes of Flame FIREEYE 8 Gestation VIVI 9 Mimiga Town MURA 10 Get Item FANFALE1 11 Balrog's Theme GINSUKE 12 Cemetery CEMETERY 13 Plant PLANT 14 Pulse KODOU 15 Victory FANFALE3 16 Get Life Capsule FANFALE2 17 Tyrant DR 18 Run ESCAPE 19 Jenka 1 JENKA 20 Labyrinth Fight MAZE 21 Access ACCESS 22 Oppression IRONH 23 Geothermal GRAND 24 Cave Story CURLY 25 Moonsong OSIDE 26 Hero's End REQUIEM 27 Scorching Back WANPAK2 28 Quiet QUIET 29 Final Cave LASTCAVE 30 Balcony BALCONY 31 Charge LASTBTL 32 Last Battle LASTBT3 33 The Way Back Home ENDING 34 Zombie ZONBIE 35 Break Down BDOWN 36 Running Hell HELL 37 Jenka 2 JENKA2 38 Living Waterway MARINE 39 Seal Chamber BALLOS 40 Toroko's Theme TOROKO 41 White Stone Wall WHITE","title":"Music ID reference"},{"location":"api/sound/organya/#modcsorganyaplay","text":"ModCS . Organya . Play ( id ) Changes the current music playing to music id .","title":"ModCS.Organya.Play()"},{"location":"api/sound/sound/","text":"ModCS.Sound The ModCS.Sound namespace contains functions related to playing different sound effects. Sound Effects ID reference ... Here I would put my own sound effects table but I'm currently too lazy. Please refer to your map editor's sound effects list. ModCS.Sound.Play() ModCS . Sound . Play ( id , loop ) Plays sound effect id . loop is an optional parameter and a Boolean. If set to true the given sound effect will play on loop. ModCS.Sound.Stop() ModCS . Npc . Stop ( id ) Stop playing sound effect id .","title":"ModCS.Sound"},{"location":"api/sound/sound/#modcssound","text":"The ModCS.Sound namespace contains functions related to playing different sound effects.","title":"ModCS.Sound"},{"location":"api/sound/sound/#sound-effects-id-reference","text":"... Here I would put my own sound effects table but I'm currently too lazy. Please refer to your map editor's sound effects list.","title":"Sound Effects ID reference"},{"location":"api/sound/sound/#modcssoundplay","text":"ModCS . Sound . Play ( id , loop ) Plays sound effect id . loop is an optional parameter and a Boolean. If set to true the given sound effect will play on loop.","title":"ModCS.Sound.Play()"},{"location":"api/sound/sound/#modcssoundstop","text":"ModCS . Npc . Stop ( id ) Stop playing sound effect id .","title":"ModCS.Sound.Stop()"}]}